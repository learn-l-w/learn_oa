<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.learn.dao.UserDao">
    <resultMap id="BaseResultMap" type="com.learn.model.User">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="title" property="departName" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="qq" property="qq" jdbcType="VARCHAR"/>
        <result column="time" property="time" jdbcType="INTEGER"/>
        <result column="update_time" property="updateTime" jdbcType="INTEGER"/>
        <result column="sex" property="sex" jdbcType="INTEGER"/>
        <result column="address" property="address" jdbcType="VARCHAR"/>
        <result column="birthday" property="birthday" jdbcType="INTEGER"/>
        <result column="postal_address" property="postal_address" jdbcType="VARCHAR"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
    </resultMap>

    <select id="selectByPassword" resultMap="BaseResultMap" parameterType="java.lang.String">
        select user.id,user.email,position.title,user.phone,user.username,user.qq,user.time,user.update_time,user.sex,user.address,user.birthday,user.postal_address,user.remark FROM user join position
        on user.dep_id=position.id where user.password = #{passwor,jdbcType=VARCHAR} and user.del = 0 and position.del=0
    </select>


    <resultMap id="BaseResultMap1" type="com.learn.model.User">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="title" property="departName" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="qq" property="qq" jdbcType="VARCHAR"/>
        <result column="time" property="time" jdbcType="INTEGER"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="update_time" property="updateTime" jdbcType="INTEGER"/>
        <result column="del" property="del" jdbcType="INTEGER"/>
        <result column="sex" property="sex" jdbcType="INTEGER"/>
        <result column="address" property="address" jdbcType="VARCHAR"/>
        <result column="birthday" property="birthday" jdbcType="INTEGER"/>
        <result column="postal_address" property="postal_address" jdbcType="VARCHAR"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
    </resultMap>

    <select id="selectById" resultMap="BaseResultMap1" parameterType="java.lang.Integer">
        select user.id,user.email,position.title,user.phone,user.username, user.qq,user.time,user.password,user.update_time,user.del,user.sex,user.address, user.birthday, user.postal_address, user.remark from user join position on user.dep_id=position.id where user.id = #{id,jdbcType=INTEGER}
    </select>


    <resultMap id="BaseResultMap3" type="com.learn.model.User">
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="title" property="departName" jdbcType="VARCHAR"/>
        <result column="job" property="job" jdbcType="VARCHAR"/>
        <result column="leaderJob" property="leaderJob" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="workPhone" property="workPhone" jdbcType="VARCHAR"/>
    </resultMap>

    <select id="selectAllUser" resultMap="BaseResultMap3">
         select DISTINCT us.username ,p.title,us.job ,u.job leaderJob,us.phone,u.phone workPhone FROM ((user u join user us on us.mgr_id=u.pers_id) left join user_position up on u.dep_id = up.position_id ) join position p on us.dep_id=p.id  where u.del=0 and p.del=0
    </select>


    <update id="update" parameterType="java.util.Map">
        update user
        <set>
            <if test="newpassword != null">
                password = #{newpassword,jdbcType=VARCHAR},
            </if>

                update_time = unix_timestamp()

        </set>
        where id=#{id,jdbcType=INTEGER}
    </update>

    <!--todo learn_1.5 项目中的删除一律用软删除，就是用del标记位 -->
    <update id="deleteId" parameterType="java.lang.Integer">
        update user
        <set>
            del = 2

        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <resultMap id="BaseResultMap2" type="com.learn.model.User">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="qq" property="qq" jdbcType="VARCHAR"/>
        <result column="time" property="time" jdbcType="INTEGER"/>
        <result column="update_time" property="updateTime" jdbcType="INTEGER"/>
        <result column="sex" property="sex" jdbcType="INTEGER"/>
        <result column="dep_id" property="depId" jdbcType="INTEGER"/>
        <result column="address" property="address" jdbcType="VARCHAR"/>
        <result column="birthday" property="birthday" jdbcType="INTEGER"/>
        <result column="postal_address" property="postal_address" jdbcType="VARCHAR"/>
        <result column="remark" property="remark" jdbcType="VARCHAR"/>
    </resultMap>

    <select id="selectUser" resultMap="BaseResultMap2" parameterType="java.util.List">
        select  id,email,phone,username,qq,time,update_time,sex,dep_id,address,birthday,postal_address,remark from user where del = 0 limit #{offset,jdbcType=INTEGER},#{length,jdbcType=INTEGER}

    </select>

    <select id="getTotal" resultType="java.lang.Integer">
        select count(*) from user where del = 0
    </select>
    
    <insert id="insertUser" parameterType="com.learn.model.User" keyProperty="id" useGeneratedKeys="true">
        insert into user
        (
        <if test="email != null">
            email,
        </if>
        <if test="phone != null">
            phone,
        </if>
        <if test="username != null">
            username,
        </if>
        <if test="qq != null">
            qq,
        </if>
        <if test="password != null">
            password,
        </if>
            time,
        <if test="sex != null">
            sex,
        </if>
        <if test="depId != null">
            dep_id,
        </if>
        <if test="persId != null">
            pers_id,
        </if>
        <if test="mgrId != null">
            mgr_id,
        </if>
        job,
        address,
        birthday,
        postal_address,
        remark,
        active_code
        )
        values
        (
        <if test="email != null">
            #{email,jdbcType=VARCHAR},
        </if>
        <if test="phone != null">
            #{phone,jdbcType=VARCHAR},
        </if>
        <if test="username != null">
            #{username,jdbcType=VARCHAR},
        </if>
        <if test="qq != null">
            #{qq,jdbcType=VARCHAR},
        </if>
        <if test="password != null">
            #{password,jdbcType=VARCHAR},
        </if>
        unix_timestamp(),
        <if test="sex != null">
            #{sex,jdbcType=INTEGER},
        </if>
        <if test="depId != null">
            #{depId,jdbcType=INTEGER},
        </if>
        #{persId,jdbcType=INTEGER},
        #{mgrId,jdbcType=INTEGER},
        #{job,jdbcType=VARCHAR},
        #{address,jdbcType=VARCHAR},
        #{birthday,jdbcType=INTEGER},
        #{postal_address,jdbcType=VARCHAR},
        #{remark,jdbcType=VARCHAR},
        #{activeCode,jdbcType=VARCHAR}
        )
    </insert>

    <resultMap id="SelectUserByEmail" type="com.learn.model.User">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="email_status" property="status" jdbcType="VARCHAR"/>
    </resultMap>
    <select id="selectUserByEmail" resultMap="SelectUserByEmail" parameterType="java.lang.String">
        select email_status from user where email=#{email,jdbcType=VARCHAR}
    </select>

    <update id="updateEmailStatus" parameterType="java.lang.String">
        update user SET
        email_status = 2
        where active_code=#{activeCode,jdbcType=VARCHAR}
    </update>

    <update id="updateUser" parameterType="com.learn.model.User">
        update user
        <set>

        username = #{username,jdbcType=VARCHAR},
        pers_id = #{persId,jdbcType=INTEGER},
        mgr_id = #{mgrId,jdbcType=INTEGER},
        job = #{job,jdbcType=VARCHAR},
        phone = #{phone,jdbcType=VARCHAR},
        dep_id = #{depId,jdbcType=INTEGER},
        update_time = unix_timestamp()

        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>